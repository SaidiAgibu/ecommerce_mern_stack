{"ast":null,"code":"import React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport ErrorMsg from 'components/atoms/ErrorMsg/ErrorMsg';\nimport heartIcon from \"assets/icons/heart.svg\";\nimport PropTypes from 'prop-types';\nimport QuantityField from 'components/molecules/QuantityField/QuantityField';\nimport Button from 'components/atoms/Button/Button';\nimport Select from 'react-select';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Formik } from 'formik';\nimport { addItem, removeWishlistItem } from 'actions';\nimport { defaultStyle, errorStyle } from './SelectCustom';\nconst StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  max-width: 340px;\n  & > * {\n    margin-top: 25px;\n  }\n`;\nconst QuantityFieldWrapper = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: ${({\n  isCentered\n}) => isCentered ? 'center' : 'stretch'};\n  flex-direction: column;\n  margin-bottom: 5px;\n`;\nconst StyledButton = styled(Button)`\n  background-color: transparent;\n  color: ${({\n  theme\n}) => theme.dark};\n`;\nconst SubmitButton = styled(Button)`\n  border-radius: ${({\n  isRound\n}) => isRound ? '50px' : '4px'};\n`;\nconst InnerWrapper = styled.div`\n  ${({\n  flex\n}) => flex && css`\n      display: flex;\n    `}\n`;\nconst WishlistButton = styled.button`\n  background-color: ${({\n  theme\n}) => theme.white};\n  background: url(${heartIcon}) no-repeat center;\n  box-shadow: 0 0 6px 0 rgba(0, 0, 0, 0.25);\n  border-radius: 4px;\n  background-size: 50%;\n  margin: 10px;\n  padding: 0 28px;\n  cursor: pointer;\n  transition: 0.35s;\n  &:hover {\n    box-shadow: 0 0 8px 0 rgba(111, 179, 235, 0.8);\n  }\n  ${({\n  inWishlist\n}) => inWishlist && css`\n      background-color: ${({\n  theme\n}) => theme.white100};\n      box-shadow: 0 0 8px 0 rgba(111, 179, 235, 0.4);\n    `}\n`;\n/*const AddForm = ({ redirect, isModal, itemData, onFinishFunc }) => {\n  const [isErrorVisible, setErrorVisibility] = useState(false);\n  const { id, image, price, name,size } = itemData;\n//const  size = itemData;\n  const sizeOptions = size.map(({ value, limit }) => ({\n    value,\n    label: value.toUpperCase(),\n    limit,\n  }));\n\n\n\n\n\n  const dispatch = useDispatch();\n  const wishlistItems = useSelector(({ wishlist }) => wishlist);\n\n  const isInWishlist = productID => {\n    return wishlistItems.some(item => productID === item.id);\n  };\n\n  const handleWishlist = productID => {\n    if (isInWishlist(productID)) {\n      dispatch(removeWishlistItem(productID, 'wishlist'));\n    } else {\n      const newWishlistItem = { id, image, price, name };\n      dispatch(addItem(newWishlistItem, 'wishlist'));\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={{ itemname: '', quantity: 1 }}\n      validate={({ itemSize, quantity }) => {\n        const errors = {};\n        if (!itemSize) {\n          errors.itemSize = 'You need to select size!';\n        }\n        if (\n          size.some(\n            ({ value, limit }) => value === itemSize && quantity >= limit,\n          )\n        ) {\n          setErrorVisibility(true);\n          setTimeout(() => setErrorVisibility(false), 1500);\n        }\n        return errors;\n      }}\n      onSubmit={({ itemSize, quantity }, { setSubmitting }) => {\n        const { limit } = sizeOptions.find(({ value }) => value === itemSize);\n        const newItem = {\n          ...itemData,\n          prize: itemSize,\n          limit,\n          quantity,\n        };\n        dispatch(addItem(newItem, 'cart'));\n        setTimeout(() => {\n          onFinishFunc();\n          setSubmitting(false);\n        }, 1500);\n      }}\n    >\n      {({\n        values,\n        touched,\n        errors,\n        setFieldTouched,\n        setFieldValue,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <StyledForm onSubmit={handleSubmit}>\n          <Select\n            placeholder={\n              (errors.itemSize && touched.itemSize && errors.itemSize) || 'Size'\n            }\n            styles={\n              errors.itemSize && touched.itemSize && errors.itemSize\n                ? errorStyle\n                : defaultStyle\n            }\n            name=\"itemSize\"\n            options={sizeOptions}\n            isOptionDisabled={option => option.limit === 0}\n            onChange={option => {\n              setFieldValue('itemSize', option.value);\n              setFieldValue('quantity', 1);\n              setFieldTouched('itemSize', false);\n            }}\n            onBlur={() => setFieldTouched('itemSize', true)}\n            isSearchable={false}\n          />\n          <QuantityFieldWrapper isCentered={isModal}>\n            <QuantityField\n              name=\"quantity\"\n              big\n              subtract={() =>\n                values.quantity > 1 &&\n                setFieldValue('quantity', values.quantity - 1)\n              }\n              add={() =>\n                sizeOptions.some(\n                  ({ value, limit }) =>\n                    value === values.itemSize && limit > values.quantity,\n                ) && setFieldValue('quantity', values.quantity + 1)\n              }\n              value={values.quantity}\n            />\n            <ErrorMsg active={isErrorVisible}>Product limit reached!</ErrorMsg>\n          </QuantityFieldWrapper>\n          <InnerWrapper flex={!isModal}>\n            <SubmitButton\n              isRound={isModal}\n              disabled={isSubmitting}\n              secondary=\"true\"\n              type=\"submit\"\n            >\n              Add to cart\n            </SubmitButton>\n            {isModal ? (\n              <StyledButton\n                type=\"button\"\n                onClick={redirect}\n                disabled={isSubmitting}\n                secondary=\"true\"\n              >\n                View full details\n              </StyledButton>\n            ) : (\n              <WishlistButton\n                type=\"button\"\n                inWishlist={isInWishlist(id)}\n                onClick={() => handleWishlist(id)}\n              />\n            )}\n          </InnerWrapper>\n        </StyledForm>\n      )}\n    </Formik>\n  );\n};\n\nAddForm.propTypes = {\n  itemData: PropTypes.objectOf(\n    PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.object,\n      PropTypes.number,\n      PropTypes.array,\n    ]),\n  ).isRequired,\n  redirect: PropTypes.func,\n  onFinishFunc: PropTypes.func.isRequired,\n  isModal: PropTypes.bool,\n};\n\nAddForm.defaultProps = {\n  isModal: false,\n  redirect: null,\n};\n\nexport default AddForm;  */","map":{"version":3,"sources":["/home/saidi/Desktop/TAYLOR+GOODS/frontend/src/components/molecules/AddItemModal/AddForm.js"],"names":["React","useState","styled","css","ErrorMsg","PropTypes","QuantityField","Button","Select","useDispatch","useSelector","Formik","addItem","removeWishlistItem","defaultStyle","errorStyle","StyledForm","form","QuantityFieldWrapper","div","isCentered","StyledButton","theme","dark","SubmitButton","isRound","InnerWrapper","flex","WishlistButton","button","white","heartIcon","inWishlist","white100"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,IAAiBC,GAAjB,QAA4B,mBAA5B;AACA,OAAOC,QAAP,MAAqB,oCAArB;;AAEA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,aAAP,MAA0B,kDAA1B;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,OAAT,EAAkBC,kBAAlB,QAA4C,SAA5C;AACA,SAASC,YAAT,EAAuBC,UAAvB,QAAyC,gBAAzC;AAEA,MAAMC,UAAU,GAAGd,MAAM,CAACe,IAAK;;;;;;;CAA/B;AASA,MAAMC,oBAAoB,GAAGhB,MAAM,CAACiB,GAAI;;;;iBAIvB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAqBA,UAAU,GAAG,QAAH,GAAc,SAAW;;;CAJzE;AASA,MAAMC,YAAY,GAAGnB,MAAM,CAACK,MAAD,CAAS;;WAEzB,CAAC;AAAEe,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACC,IAAK;CAFrC;AAKA,MAAMC,YAAY,GAAGtB,MAAM,CAACK,MAAD,CAAS;mBACjB,CAAC;AAAEkB,EAAAA;AAAF,CAAD,KAAkBA,OAAO,GAAG,MAAH,GAAY,KAAO;CAD/D;AAIA,MAAMC,YAAY,GAAGxB,MAAM,CAACiB,GAAI;IAC5B,CAAC;AAAEQ,EAAAA;AAAF,CAAD,KACAA,IAAI,IACJxB,GAAI;;KAEF;CALN;AAQA,MAAMyB,cAAc,GAAG1B,MAAM,CAAC2B,MAAO;sBACf,CAAC;AAAEP,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACQ,KAAM;oBAC7BC,SAAU;;;;;;;;;;;IAW1B,CAAC;AAAEC,EAAAA;AAAF,CAAD,KACAA,UAAU,IACV7B,GAAI;0BACkB,CAAC;AAAEmB,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACW,QAAS;;KAElD;CAlBN;AAqBA","sourcesContent":["import React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport ErrorMsg from 'components/atoms/ErrorMsg/ErrorMsg';\nimport heartIcon from 'assets/icons/heart.svg';\nimport PropTypes from 'prop-types';\nimport QuantityField from 'components/molecules/QuantityField/QuantityField';\nimport Button from 'components/atoms/Button/Button';\nimport Select from 'react-select';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Formik } from 'formik';\nimport { addItem, removeWishlistItem } from 'actions';\nimport { defaultStyle, errorStyle } from './SelectCustom';\n\nconst StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  max-width: 340px;\n  & > * {\n    margin-top: 25px;\n  }\n`;\n\nconst QuantityFieldWrapper = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: ${({ isCentered }) => (isCentered ? 'center' : 'stretch')};\n  flex-direction: column;\n  margin-bottom: 5px;\n`;\n\nconst StyledButton = styled(Button)`\n  background-color: transparent;\n  color: ${({ theme }) => theme.dark};\n`;\n\nconst SubmitButton = styled(Button)`\n  border-radius: ${({ isRound }) => (isRound ? '50px' : '4px')};\n`;\n\nconst InnerWrapper = styled.div`\n  ${({ flex }) =>\n    flex &&\n    css`\n      display: flex;\n    `}\n`;\n\nconst WishlistButton = styled.button`\n  background-color: ${({ theme }) => theme.white};\n  background: url(${heartIcon}) no-repeat center;\n  box-shadow: 0 0 6px 0 rgba(0, 0, 0, 0.25);\n  border-radius: 4px;\n  background-size: 50%;\n  margin: 10px;\n  padding: 0 28px;\n  cursor: pointer;\n  transition: 0.35s;\n  &:hover {\n    box-shadow: 0 0 8px 0 rgba(111, 179, 235, 0.8);\n  }\n  ${({ inWishlist }) =>\n    inWishlist &&\n    css`\n      background-color: ${({ theme }) => theme.white100};\n      box-shadow: 0 0 8px 0 rgba(111, 179, 235, 0.4);\n    `}\n`;\n\n/*const AddForm = ({ redirect, isModal, itemData, onFinishFunc }) => {\n  const [isErrorVisible, setErrorVisibility] = useState(false);\n  const { id, image, price, name,size } = itemData;\n//const  size = itemData;\n  const sizeOptions = size.map(({ value, limit }) => ({\n    value,\n    label: value.toUpperCase(),\n    limit,\n  }));\n\n\n\n\n\n  const dispatch = useDispatch();\n  const wishlistItems = useSelector(({ wishlist }) => wishlist);\n\n  const isInWishlist = productID => {\n    return wishlistItems.some(item => productID === item.id);\n  };\n\n  const handleWishlist = productID => {\n    if (isInWishlist(productID)) {\n      dispatch(removeWishlistItem(productID, 'wishlist'));\n    } else {\n      const newWishlistItem = { id, image, price, name };\n      dispatch(addItem(newWishlistItem, 'wishlist'));\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={{ itemname: '', quantity: 1 }}\n      validate={({ itemSize, quantity }) => {\n        const errors = {};\n        if (!itemSize) {\n          errors.itemSize = 'You need to select size!';\n        }\n        if (\n          size.some(\n            ({ value, limit }) => value === itemSize && quantity >= limit,\n          )\n        ) {\n          setErrorVisibility(true);\n          setTimeout(() => setErrorVisibility(false), 1500);\n        }\n        return errors;\n      }}\n      onSubmit={({ itemSize, quantity }, { setSubmitting }) => {\n        const { limit } = sizeOptions.find(({ value }) => value === itemSize);\n        const newItem = {\n          ...itemData,\n          prize: itemSize,\n          limit,\n          quantity,\n        };\n        dispatch(addItem(newItem, 'cart'));\n        setTimeout(() => {\n          onFinishFunc();\n          setSubmitting(false);\n        }, 1500);\n      }}\n    >\n      {({\n        values,\n        touched,\n        errors,\n        setFieldTouched,\n        setFieldValue,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <StyledForm onSubmit={handleSubmit}>\n          <Select\n            placeholder={\n              (errors.itemSize && touched.itemSize && errors.itemSize) || 'Size'\n            }\n            styles={\n              errors.itemSize && touched.itemSize && errors.itemSize\n                ? errorStyle\n                : defaultStyle\n            }\n            name=\"itemSize\"\n            options={sizeOptions}\n            isOptionDisabled={option => option.limit === 0}\n            onChange={option => {\n              setFieldValue('itemSize', option.value);\n              setFieldValue('quantity', 1);\n              setFieldTouched('itemSize', false);\n            }}\n            onBlur={() => setFieldTouched('itemSize', true)}\n            isSearchable={false}\n          />\n          <QuantityFieldWrapper isCentered={isModal}>\n            <QuantityField\n              name=\"quantity\"\n              big\n              subtract={() =>\n                values.quantity > 1 &&\n                setFieldValue('quantity', values.quantity - 1)\n              }\n              add={() =>\n                sizeOptions.some(\n                  ({ value, limit }) =>\n                    value === values.itemSize && limit > values.quantity,\n                ) && setFieldValue('quantity', values.quantity + 1)\n              }\n              value={values.quantity}\n            />\n            <ErrorMsg active={isErrorVisible}>Product limit reached!</ErrorMsg>\n          </QuantityFieldWrapper>\n          <InnerWrapper flex={!isModal}>\n            <SubmitButton\n              isRound={isModal}\n              disabled={isSubmitting}\n              secondary=\"true\"\n              type=\"submit\"\n            >\n              Add to cart\n            </SubmitButton>\n            {isModal ? (\n              <StyledButton\n                type=\"button\"\n                onClick={redirect}\n                disabled={isSubmitting}\n                secondary=\"true\"\n              >\n                View full details\n              </StyledButton>\n            ) : (\n              <WishlistButton\n                type=\"button\"\n                inWishlist={isInWishlist(id)}\n                onClick={() => handleWishlist(id)}\n              />\n            )}\n          </InnerWrapper>\n        </StyledForm>\n      )}\n    </Formik>\n  );\n};\n\nAddForm.propTypes = {\n  itemData: PropTypes.objectOf(\n    PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.object,\n      PropTypes.number,\n      PropTypes.array,\n    ]),\n  ).isRequired,\n  redirect: PropTypes.func,\n  onFinishFunc: PropTypes.func.isRequired,\n  isModal: PropTypes.bool,\n};\n\nAddForm.defaultProps = {\n  isModal: false,\n  redirect: null,\n};\n\nexport default AddForm;  */\n"]},"metadata":{},"sourceType":"module"}