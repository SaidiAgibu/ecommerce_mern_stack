{"ast":null,"code":"import axios from 'axios';\nimport { ALL_PRODUCT_FAIL, ALL_PRODUCT_REQUEST, ALL_PRODUCT_SUCCESS, CLEAR_ERRORS, PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_FAIL, PRODUCT_DETAILS_SUCCESS, NEW_REVIEW_REQUEST, NEW_REVIEW_SUCCESS, NEW_REVIEW_FAIL } from '../constants/productConstants';\nexport const getProduct = (keyword = \"\") => async dispatch => {\n  try {\n    dispatch({\n      type: ALL_PRODUCT_REQUEST\n    });\n    console.log(await axios.get('/api/v1/products'));\n    const {\n      data\n    } = await axios.get('/api/v1/products?keyword=');\n    dispatch({\n      type: ALL_PRODUCT_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ALL_PRODUCT_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Get Products Details\n\nexport const getProductDetails = id => async dispatch => {\n  try {\n    dispatch({\n      type: PRODUCT_DETAILS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/v1/product/${id}`);\n    console.log(data);\n    dispatch({\n      type: PRODUCT_DETAILS_SUCCESS,\n      payload: data.product\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_DETAILS_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // NEW REVIEW\n\nexport const newReview = reviewData => async dispatch => {\n  try {\n    dispatch({\n      type: NEW_REVIEW_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/v1/review`, reviewData, config);\n    dispatch({\n      type: NEW_REVIEW_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: NEW_REVIEW_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; //clearing errors\n\nexport const clearErrors = () => async dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"sources":["/home/saidi/Desktop/TAYLOR+GOODS/FRONTEND/src/actions/productAction.js"],"names":["axios","ALL_PRODUCT_FAIL","ALL_PRODUCT_REQUEST","ALL_PRODUCT_SUCCESS","CLEAR_ERRORS","PRODUCT_DETAILS_REQUEST","PRODUCT_DETAILS_FAIL","PRODUCT_DETAILS_SUCCESS","NEW_REVIEW_REQUEST","NEW_REVIEW_SUCCESS","NEW_REVIEW_FAIL","getProduct","keyword","dispatch","type","console","log","get","data","payload","error","response","message","getProductDetails","id","product","newReview","reviewData","config","headers","put","success","clearErrors"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACIC,gBADJ,EAEIC,mBAFJ,EAGIC,mBAHJ,EAIIC,YAJJ,EAKIC,uBALJ,EAMIC,oBANJ,EAOIC,uBAPJ,EAQIC,kBARJ,EASIC,kBATJ,EAUIC,eAVJ,QAWO,+BAXP;AAaA,OAAO,MAAMC,UAAU,GAAG,CAACC,OAAO,GAAC,EAAT,KAAgB,MAAOC,QAAP,IAAoB;AAC1D,MAAI;AACAA,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAEZ;AAAP,KAAD,CAAR;AAGAa,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAMhB,KAAK,CAACiB,GAAN,CAAU,kBAAV,CAAlB;AACA,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMlB,KAAK,CAACiB,GAAN,CAAU,2BAAV,CAArB;AAEAJ,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAACX,mBADA;AAELgB,MAAAA,OAAO,EAAED;AAFJ,KAAD,CAAR;AAIH,GAXD,CAWE,OAAOE,KAAP,EAAc;AACZP,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEb,gBADD;AAELkB,MAAAA,OAAO,EAAEC,KAAK,CAACC,QAAN,CAAeH,IAAf,CAAoBI;AAFxB,KAAD,CAAR;AAIH;AACJ,CAlBM,C,CAoBP;;AACA,OAAO,MAAMC,iBAAiB,GAAIC,EAAD,IAAQ,MAAOX,QAAP,IAAoB;AACzD,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAET;AAAR,KAAD,CAAR;AAEA,UAAM;AAAEa,MAAAA;AAAF,QAAW,MAAMlB,KAAK,CAACiB,GAAN,CAAW,mBAAkBO,EAAG,EAAhC,CAAvB;AACAT,IAAAA,OAAO,CAACC,GAAR,CAAYE,IAAZ;AAEAL,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEP,uBADC;AAEPY,MAAAA,OAAO,EAAED,IAAI,CAACO;AAFP,KAAD,CAAR;AAID,GAVD,CAUE,OAAOL,KAAP,EAAc;AACdP,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAER,oBADC;AAEPa,MAAAA,OAAO,EAAEC,KAAK,CAACC,QAAN,CAAeH,IAAf,CAAoBI;AAFtB,KAAD,CAAR;AAID;AACF,CAjBI,C,CAmBL;;AACF,OAAO,MAAMI,SAAS,GAAIC,UAAD,IAAgB,MAAOd,QAAP,IAAoB;AACzD,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEN;AAAR,KAAD,CAAR;AAEA,UAAMoB,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AADI,KAAf;AAIA,UAAM;AAAEX,MAAAA;AAAF,QAAW,MAAMlB,KAAK,CAAC8B,GAAN,CAAW,gBAAX,EAA4BH,UAA5B,EAAwCC,MAAxC,CAAvB;AAEAf,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEL,kBADC;AAEPU,MAAAA,OAAO,EAAED,IAAI,CAACa;AAFP,KAAD,CAAR;AAID,GAbD,CAaE,OAAOX,KAAP,EAAc;AACdP,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEJ,eADC;AAEPS,MAAAA,OAAO,EAAEC,KAAK,CAACC,QAAN,CAAeH,IAAf,CAAoBI;AAFtB,KAAD,CAAR;AAID;AACF,CApBI,C,CAsBP;;AACA,OAAO,MAAMU,WAAW,GAAG,MAAM,MAAOnB,QAAP,IAAoB;AACjDA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEV;AAAR,GAAD,CAAR;AACH,CAFM","sourcesContent":["import axios from 'axios';\n\nimport {\n    ALL_PRODUCT_FAIL,\n    ALL_PRODUCT_REQUEST,\n    ALL_PRODUCT_SUCCESS,\n    CLEAR_ERRORS,\n    PRODUCT_DETAILS_REQUEST,\n    PRODUCT_DETAILS_FAIL,\n    PRODUCT_DETAILS_SUCCESS,\n    NEW_REVIEW_REQUEST,\n    NEW_REVIEW_SUCCESS,\n    NEW_REVIEW_FAIL,\n} from '../constants/productConstants';\n\nexport const getProduct = (keyword=\"\") => async (dispatch) => {\n    try {\n        dispatch({type: ALL_PRODUCT_REQUEST});\n        \n        \n        console.log(await axios.get('/api/v1/products'));\n        const {data} = await axios.get('/api/v1/products?keyword=');\n\n        dispatch({\n            type:ALL_PRODUCT_SUCCESS,\n            payload: data,\n        })\n    } catch (error) {\n        dispatch({\n            type: ALL_PRODUCT_FAIL,\n            payload: error.response.data.message,\n        })\n    }\n};\n\n// Get Products Details\nexport const getProductDetails = (id) => async (dispatch) => {\n    try {\n      dispatch({ type: PRODUCT_DETAILS_REQUEST });\n  \n      const { data } = await axios.get(`/api/v1/product/${id}`);\n      console.log(data);\n  \n      dispatch({\n        type: PRODUCT_DETAILS_SUCCESS,\n        payload: data.product,\n      });\n    } catch (error) {\n      dispatch({\n        type: PRODUCT_DETAILS_FAIL,\n        payload: error.response.data.message,\n      });\n    }\n  };\n \n  // NEW REVIEW\nexport const newReview = (reviewData) => async (dispatch) => {\n    try {\n      dispatch({ type: NEW_REVIEW_REQUEST });\n  \n      const config = {\n        headers: { \"Content-Type\": \"application/json\" },\n      };\n  \n      const { data } = await axios.put(`/api/v1/review`, reviewData, config);\n  \n      dispatch({\n        type: NEW_REVIEW_SUCCESS,\n        payload: data.success,\n      });\n    } catch (error) {\n      dispatch({\n        type: NEW_REVIEW_FAIL,\n        payload: error.response.data.message,\n      });\n    }\n  };\n\n//clearing errors\nexport const clearErrors = () => async (dispatch) => {\n    dispatch({ type: CLEAR_ERRORS });\n}"]},"metadata":{},"sourceType":"module"}